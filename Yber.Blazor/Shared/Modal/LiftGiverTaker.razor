@inject HotKeys HotKeys
@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@implements IDisposable

<div class="modal ">
    <div class="modal-content rz-background-color-Info-light">
        <div class="modal-header">
            <h3 style="color: black"class="modal-title">Lift Options</h3>
        </div>
        <div class="modal-body">
            <p style="color: black"class="message">@Message</p>
            <p style="color: black">Please Select one of the options bellow:</p>
        </div>
        <div class="modal-footer">
            <RadzenButton Click="LiftGiverAsynce" ButtonStyle="ButtonStyle.Info" class="modal-button">I can give a lift (Dybbøl)</RadzenButton>
            <RadzenButton Click="LiftTakerAsynce" ButtonStyle="ButtonStyle.Info" class="modal-button">I want a lift</RadzenButton>
            <RadzenButton Click="Cancel" ButtonStyle="ButtonStyle.Light" class="modal-button">Cancel</RadzenButton>
        </div>
    </div>
</div>


@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter] public string? Message { get; set; }

    HotKeysContext? HotKeysContext;
    I18nText.LanguageTable _languageTable = new();

    protected async override void OnInitialized()
    {
        _languageTable = await I18nText.GetTextTableAsync<I18nText.LanguageTable>(this);
        HotKeysContext = HotKeys.CreateContext()
            .Add(Code.Escape, async () => await Cancel());
    }

    async Task LiftGiverAsynce() => await BlazoredModal.CloseAsync(ModalResult.Ok("LiftGiver"));
    async Task LiftTakerAsynce() => await BlazoredModal.CloseAsync(ModalResult.Ok("LiftTaker"));

    async Task Cancel() => await BlazoredModal.CancelAsync();

    public void Dispose()
    {
        if (HotKeysContext is not null)
        {
            HotKeysContext.Dispose();
        }        
    }
}
